[project]
name = "docuforge"
version = "1.0.0"
description = "DocuForge - AI-Powered Document Processing Service with Inngest Orchestration"
authors = [{name = "DocuForge Team"}]
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    # Web Framework
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",

    # Inngest
    "inngest>=0.3.0",

    # Database
    "asyncpg>=0.29.0",
    "sqlalchemy[asyncio]>=2.0.23",
    "alembic>=1.13.0",

    # Storage
    "minio>=7.2.0",

    # Cache
    "redis[hiredis]>=5.0.1",
    "aioredis>=2.0.1",

    # Document Processing
    "opencv-python-headless>=4.8.1",
    "pillow>=10.1.0",
    "pytesseract>=0.3.10",
    "pdf2image>=1.16.3",

    # AI/ML
    "openai>=1.3.7",
    "anthropic>=0.7.7",

    # Utilities
    "httpx>=0.25.2",
    "aiofiles>=23.2.1",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "prometheus-fastapi-instrumentator>=7.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
    "factory-boy>=3.3.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/migrations/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
